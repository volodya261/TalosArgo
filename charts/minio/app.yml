apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: minio-server
  namespace: minio
spec:
  project: default
  destination:
    server: https://kubernetes.default.svc
    namespace: minio
  source:
    chart: minio
    repoURL: charts.bitnami.com/bitnami
    helm:
      values: |
        global:
          imageRegistry: ""
          imagePullSecrets: []
          defaultStorageClass: ""
          storageClass: "local-path"
          security:
            allowInsecureImages: false
          compatibility:

        image:
          registry: docker.io
          repository: bitnami/minio
          tag: latest
          digest: ""
          pullPolicy: IfNotPresent
          pullSecrets: []
          debug: false
        clientImage:
          registry: docker.io
          repository: bitnami/minio-client
          tag: latest
          digest: ""
        mode: standalone
        auth:
          rootUser: "" 
          rootPassword: ""
          existingSecret: "minio"
          rootUserSecretKey: ""
          rootPasswordSecretKey: ""
          forcePassword: false
          usePasswordFiles: true
          useSecret: true
          forceNewKeys: false

        defaultBuckets: ""
        disableWebUI: false 
        tls:
          enabled: false 
          autoGenerated: false 
          existingSecret: ""
          mountPath: ""
        deployment:
          updateStrategy:
            type: Recreate
        statefulset:
          updateStrategy:
            type: RollingUpdate
          podManagementPolicy: Parallel
          replicaCount: 1
          zones: 1
          drivesPerNode: 1
        provisioning:
          enabled: false
          sleepTime: 5
          schedulerName: ""
          nodeSelector: {}
          podLabels: {}
          podAnnotations: 
                  prometheus.io/scrape: "true"
                  prometheus.io/path: "/minio/v2/metrics/cluster"
                  prometheus.io/port: "9000"
          command: []
          args: []
          extraCommands: []
          extraVolumes: []
          extraVolumeMounts: []
          resourcesPreset: "nano"
          resources: {}
          policies: []
          users: []
          usersExistingSecrets: []
          groups: []
          buckets: []
          config: []
          podSecurityContext:
            enabled: true 
            fsGroupChangePolicy: Always
            sysctls: []
            supplementalGroups: []
            fsGroup: 1001
          containerSecurityContext:
            enabled: true
            seLinuxOptions: {}
            runAsUser: 1001
            runAsGroup: 1001
            runAsNonRoot: true
            privileged: false
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
            seccompProfile:
              type: "RuntimeDefault"
          cleanupAfterFinished:
            enabled: false
            seconds: 600
          networkPolicy:
            enabled: true
            allowExternalEgress: true
        automountServiceAccountToken: false
        hostAliases: []
        containerPorts:
          api: 9000
          console: 9001
        podSecurityContext:
          enabled: true
          sysctls: []
          supplementalGroups: []
          fsGroup: 1001
          fsGroupChangePolicy: "OnRootMismatch"
        containerSecurityContext:
          enabled: true
          seLinuxOptions: {}
          runAsUser: 1001
          runAsGroup: 1001
          runAsNonRoot: true
          privileged: false
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
          seccompProfile:
            type: "RuntimeDefault"
        podAntiAffinityPreset: soft
        resourcesPreset: "micro"
        livenessProbe:
          enabled: true
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        readinessProbe:
          enabled: true
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 5
        startupProbe:
          enabled: false
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 60
        service:
          type: ClusterIP
          ports:
            api: 9000
            console: 9001
          nodePorts:
            api: ""
            console: ""
          clusterIP: ""
          loadBalancerIP: ""
          loadBalancerSourceRanges: []
          externalTrafficPolicy: Cluster
          extraPorts: []
          annotations: {}
          headless:
            annotations: {}
        ingress:
          enabled: true
        networkPolicy:
          enabled: true
          allowExternal: true
          allowExternalEgress: true
          extraIngress: []
          extraEgress: []
          ingressNSMatchLabels: {}
          ingressNSPodMatchLabels: {}

        persistence:
          enabled: true 
          storageClass: "local-path"
          mountPath: /bitnami/minio/data
          accessModes:
            - ReadWriteOnce
          size: 5Gi
          annotations: {}
          existingClaim: ""
          selector: {}
        volumePermissions:
          enabled: true 
          image:
            registry: docker.io
            repository: bitnami/os-shell
            tag: 12-debian-12-r43
            digest: ""
            pullPolicy: IfNotPresent
            pullSecrets: []
          resourcesPreset: "nano"
          resources: {}
          containerSecurityContext:
            seLinuxOptions: {}
            runAsUser: 0
        serviceAccount:
          create: false
          name: ""
          automountServiceAccountToken: false
          annotations: {}
        pdb:
          create: true
          minAvailable: ""
          maxUnavailable: ""
        metrics:
          prometheusAuthType: public
          enabled: false
          serviceMonitor:
            enabled: false
            namespace: ""
            labels: {}
            jobLabel: ""
            paths:
              - /minio/v2/metrics/cluster
              - /minio/v2/metrics/node
            interval: 30s
            scrapeTimeout: ""
            metricRelabelings: []
            relabelings: []
            honorLabels: false
            selector: {}
            apiVersion: ""
            tlsConfig: {}
          prometheusRule:
            enabled: false
            namespace: ""
            additionalLabels: {}
            rules: []
